from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from database.core import crud
from site_API.core import site_api, url_dict, lang, headers
from tg_API.keyboards.inline.choice_buttons import menu_search_hotel
from tg_API.states.requests_state import FSMRequests
from telegram_bot_calendar import DetailedTelegramCalendar

db_write = crud.write()
db_update = crud.update()
db_check_id = crud.check_id()
db_read = crud.read()
db_check_setting = crud.check_setting()
LSTEP_RU = {'y': '–≥–æ–¥', 'm': '–º–µ—Å—è—Ü', 'd': '–¥–µ–Ω—å'}


# –ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π
async def start_menu(message: types.Message):
    await FSMRequests.requests.set()
    await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π', reply_markup=menu_search_hotel())


# –í—Ö–æ–¥ –≤ –∑–∞–ø—Ä–æ—Å –∫ —Å–∞–π—Ç—É
async def requests(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['hotel'] = callback.data

    """–£—Ç–æ—á–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    # if db_check_id(db, User, message.from_user.id).exists():
    #     lang, cur = db_check_setting(db, Setting, message.from_user.id)
    #
    #     await message.answer(
    #         f'<b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏?</b>\n'
    #         f'<b>–Ø–∑—ã–∫:</b> {lang}\n'
    #         f'<b>–í–∞–ª—é—Ç–∞:</b> {cur}',
    #         reply_markup=get_yes_no_setting())
    await callback.message.answer('–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?')
    await FSMRequests.next()


async def search_city(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ–∏—Å–∫—É –≥–æ—Ä–æ–¥–∞, –≤—ã–≤–æ–¥ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""

    temp = await message.answer('–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...')
    city_list = site_api.get_location()

    response = city_list(message, url_dict, headers, lang)
    keyboard = types.InlineKeyboardMarkup()
    text = '<b>–£—Ç–æ—á–Ω–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é</b>      ‚¨áÔ∏è'
    await temp.delete()
    if not response:
        await message.answer('–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...\n/help')
    else:
        for city_name, city_id in response.items():
            keyboard.add(types.InlineKeyboardButton(text=city_name, callback_data=city_id))

        await message.answer(text, reply_markup=keyboard)
    await FSMRequests.next()


async def city_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–∫–æ–º–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (id, name), –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    async with state.proxy() as data:
        data['regionId'] = callback.data

    await callback.message.delete()

    calendar, step = DetailedTelegramCalendar(locale='ru').build()
    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ {LSTEP_RU[step]}", reply_markup=calendar)
    await FSMRequests.next()


async def check_in(callback: types.CallbackQuery, state: FSMContext):
    result, key, step = DetailedTelegramCalendar(locale='ru').process(callback.data)

    if not result and key:
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP_RU[step]}", reply_markup=key)
    elif result:
        await callback.message.edit_text(f"–í–∞—à–∞ –¥–∞—Ç–∞ {result}")
        async with state.proxy() as data:
            data['checkInDay'] = int(result.day)
            data['checkInMonth'] = int(result.month)
            data['checkInYear'] = int(result.year)

        calendar, step = DetailedTelegramCalendar(locale='ru').build()
        await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞", reply_markup=calendar)
        await FSMRequests.next()


async def check_out(callback: types.CallbackQuery, state: FSMContext):
    result, key, step = DetailedTelegramCalendar(locale='ru').process(callback.data)

    if not result and key:
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP_RU[step]}", reply_markup=key)
    elif result:
        await callback.message.edit_text(f"–í–∞—à–∞ –¥–∞—Ç–∞ {result}")

        async with state.proxy() as data:
            data['checkOutDay'] = int(result.day)
            data['checkOutMonth'] = int(result.month)
            data['checkOutYear'] = int(result.year)

        await FSMRequests.next()
        await callback.message.answer('–°–∫–æ–ª—å–∫–æ –≤–∑—Ä–æ—Å–ª—ã—Ö?')


async def count_parents(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['adults'] = int(message.text)

    await message.answer('–°–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π?')
    await FSMRequests.next()


async def count_children(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['children'] = int(message.text)

    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç:')
    await FSMRequests.next()


async def set_price_min(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['min'] = int(message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ')
    await FSMRequests.next()


async def set_price_max(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['max'] = int(message.text)

    hotels_list = site_api.get_hotel()
    response = hotels_list(data)

    await FSMRequests.next()
    await message.answer('–ù–∞–π–¥–µ–Ω–æ –æ—Ç–µ–ª–µ–π')




def register_handlers_requests(dp: Dispatcher):
    dp.register_message_handler(start_menu, Text(equals=['üîé –ü–æ–∏—Å–∫ –æ—Ç–µ–ª—è', 'üîé Search hotel'], ignore_case=True))
    dp.register_callback_query_handler(requests, state=FSMRequests.requests)
    # dp.register_callback_query_handler(
    #     lang_cur, Text(equals=['setting_choice_no'], ignore_case=True),
    #     state=FSMRequests.search_city)
    dp.register_message_handler(search_city, state=FSMRequests.search_city)
    dp.register_callback_query_handler(city_handler, state=FSMRequests.city_handler)
    dp.register_callback_query_handler(check_in, DetailedTelegramCalendar.func(), state=FSMRequests.check_in)
    dp.register_callback_query_handler(check_out, DetailedTelegramCalendar.func(), state=FSMRequests.check_out)
    dp.register_message_handler(count_parents, state=FSMRequests.count_parents)
    dp.register_message_handler(count_children, state=FSMRequests.count_children)
    dp.register_message_handler(set_price_min, state=FSMRequests.set_price_min)
    dp.register_message_handler(set_price_max, state=FSMRequests.set_price_max)
